package com.fiberg.wsio.processor;

import org.apache.commons.lang3.StringUtils;

import javax.annotation.processing.Messager;
import javax.lang.model.element.Element;
import javax.tools.Diagnostic;

import static java.lang.String.format;

final class WsIOHandler {

	private WsIOHandler() {}

	public static void error(Messager messager, Element e, Throwable t, String msg, Object... args) {
		messager.printMessage(
				Diagnostic.Kind.ERROR,
				formatThrowable(t, String.format(msg, args)),
				e);
	}

	public static void error(Messager messager, Element e, String msg, Object... args) {
		messager.printMessage(
				Diagnostic.Kind.ERROR,
				String.format(msg, args),
				e);
	}

	public static void error(Messager messager, Throwable t, String msg, Object... args) {
		messager.printMessage(
				Diagnostic.Kind.ERROR,
				formatThrowable(t, String.format(msg, args)));
	}

	public static void error(Messager messager, String msg, Object... args) {
		messager.printMessage(
				Diagnostic.Kind.ERROR,
				String.format(msg, args));
	}

	public static void error(Messager messager, Throwable t) {
		messager.printMessage(
				Diagnostic.Kind.ERROR,
				formatThrowable(t));
	}

	public static void error(Messager messager, Element e, Throwable t) {
		messager.printMessage(
				Diagnostic.Kind.ERROR,
				formatThrowable(t),
				e);
	}

	public static void warning(Messager messager, Element e, Throwable t, String msg, Object... args) {
		messager.printMessage(
				Diagnostic.Kind.WARNING,
				formatThrowable(t, String.format(msg, args)),
				e);
	}

	public static void warning(Messager messager, Element e, String msg, Object... args) {
		messager.printMessage(
				Diagnostic.Kind.WARNING,
				String.format(msg, args),
				e);
	}

	public static void warning(Messager messager, Throwable t, String msg, Object... args) {
		messager.printMessage(
				Diagnostic.Kind.WARNING,
				formatThrowable(t, String.format(msg, args)));
	}

	public static void warning(Messager messager, String msg, Object... args) {
		messager.printMessage(
				Diagnostic.Kind.WARNING,
				String.format(msg, args));
	}

	public static void warning(Messager messager, Throwable t) {
		messager.printMessage(
				Diagnostic.Kind.WARNING,
				formatThrowable(t));
	}

	public static void warning(Messager messager, Element e, Throwable t) {
		messager.printMessage(
				Diagnostic.Kind.WARNING,
				formatThrowable(t),
				e);
	}

	private static String formatThrowable(Throwable throwable) {
		return formatThrowable(throwable, null);
	}

	private static String formatThrowable(Throwable throwable, String prefix) {
		if (throwable != null) {
			String message = "";
			if (StringUtils.isNotBlank(prefix)) {
				message += prefix + " - Generated By: ";
			}
			message += throwable.getMessage();
			if (throwable.getCause() != null) {
				message += format(" - Caused By: %s", throwable.getCause().getMessage());
			}
			return message;
		}
		return null;
	}

}
